name: CodeQL Baseline Analysis

on:
  push:
    branches: [ "experiment/baseline-leak" ] # Dispara quando há um push para este branch
  pull_request:
    branches: [ "experiment/baseline-leak" ] # Dispara quando há um PR para este branch
  workflow_dispatch: # Permite acionar manualmente o workflow na interface do GitHub

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest # O sistema operacional do runner

    permissions:
      security-events: write # Permissão necessária para carregar resultados SARIF
      actions: read
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: ${{ github.event.pull_request.head.sha || github.sha }} # Garante o commit correto

    # Instala dependências de build para libsolv
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake autoconf libtool pkg-config zlib1g-dev libbz2-dev liblzma-dev

    # Inicializa o CodeQL CLI
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp # Especifica a linguagem C++

    # Realiza o build do projeto para que o CodeQL possa monitorar a compilação
    # O libsolv usa CMake, então vamos especificar o processo de build
    - name: Build libsolv
      run: |
        mkdir build
        cd build
        cmake ..
        make -j$(nproc) # Use todos os núcleos disponíveis para um build mais rápido

    # Executa as queries padrão do CodeQL para vazamentos de memória
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "libsolv-codeql-baseline" # Categoria para identificar esses resultados
        # As queries padrão de vazamento de memória já são incluídas por padrão para C++